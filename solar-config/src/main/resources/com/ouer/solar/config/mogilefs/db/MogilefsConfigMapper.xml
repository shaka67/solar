<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ouer.solar.config.mogilefs.db.MogilefsConfigMapper">

	<resultMap id="mogilefs_config" type="com.ouer.solar.config.mogilefs.MogilefsConfig">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="app_id" property="appId" jdbcType="VARCHAR" />
		<result column="trackers" property="trackers" jdbcType="VARCHAR" />
		<result column="reconnect_timeout" property="reconnectTimeout" jdbcType="INTEGER" />
		<result column="max_active" property="maxActive" jdbcType="INTEGER" />
		<result column="max_idle" property="maxIdle" jdbcType="INTEGER" />
		<result column="domain" property="domain" jdbcType="VARCHAR" />
		<result column="http_prefix" property="httpPrefix" jdbcType="VARCHAR" />
	</resultMap>
	
	<sql id="Base_Column_List">
		app_id, trackers, reconnect_timeout, max_active, max_idle, domain, http_prefix
	</sql>
	
	<insert id="insert" parameterType="com.ouer.solar.config.mogilefs.MogilefsConfig"
		useGeneratedKeys="true" keyProperty="id">
		insert into mogilefs_config (
		app_id, trackers, reconnect_timeout, max_active, max_idle, domain, http_prefix, created_at, updated_at
		)
		values (
		#{appId}, #{trackers}, #{reconnectTimeout}, #{maxActive}, #{maxIdle}, #{domain}, #{httpPrefix},
		now(),
		now()
		)
	</insert>
	
	<update id="update" parameterType="com.ouer.solar.config.mogilefs.MogilefsConfig">
		update mogilefs_config
		<set>
			<if test="trackers != null">
				trackers = #{trackers}, 
			</if>
			<if test="reconnectTimeout != null">
				reconnect_timeout = #{reconnectTimeout}, 
			</if>
			<if test="maxActive != 0">
				max_active = #{maxActive}, 
			</if>
			<if test="maxIdle != null">
				max_idle = #{maxIdle}, 
			</if>
			<if test="domain != null">
				domain = #{domain}, 
			</if>
			<if test="httpPrefix != null">
				http_prefix = #{httpPrefix}, 
			</if>
			updated_at = now()
		</set>
		where app_id = #{appId}
	</update>
	
	<select id="select" resultMap="mogilefs_config">
		select <include refid="Base_Column_List"/> from mogilefs_config where app_id = #{appId}
	</select>
	
	<select id="exists" resultType="boolean">
    	<![CDATA[ select count(*)  from mogilefs_config where app_id = #{appId} ]]>
	</select> 
	
	<delete id="delete">
    	delete from mogilefs_config where app_id = #{appId}
  	</delete>
</mapper>